
# Editing parenscript

## Trident mode
- in conjunction with skewer-mode can execute parenscript
  in the browser. it does not support completion. it is on melpa
- if we don't use the parenscript package, macros are not expanded:
```
(@ (@
	((@ navigator media-devices get-user-media) constraints)
	(then got-stream))
       (catch handle-error))
```
- expands to this:
```
return at(at(at(navigator, mediaDevices, getUserMedia)(constraints), then(gotStream)), catch(handleError));
```
- using parenscript package gives:

```
    return navigator.mediaDevices.getUserMedia(constraints)[then(gotStream)][catch(handleError)];
```


## slime-proxy
- seems to do completion but needs parenscript patches and is not on
  melpa. i haven't tried it

# References

- https://whatwebcando.today/camera-microphone.html
- https://www.html5rocks.com/en/tutorials/getusermedia/intro/
- https://github.com/cljsjs/packages/tree/master/media-stream-recorder
- https://www.adobe.com/devnet/archive/html5/articles/javascript-motion-detection.html

- https://www.youtube.com/watch?v=_ZQOUQsw_YI live coding webgl
- https://www.youtube.com/watch?v=Ah7z3E56YPQ using the camera
- https://github.com/GoogleChromeLabs/snapshot/tree/master/src
- image capture using canvas https://youtu.be/Ah7z3E56YPQ?t=554
- https://github.com/GoogleChromeLabs/snapshot/blob/10dd00fed8ddbe67d379eca846c2ecfca3142b0d/src/camera-helper.ts
```
const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d')!;
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      context.drawImage(video, 0, 0);

return await canvasToBlob(canvas, constants.IMAGE_TYPE);
```
- contrast shader https://www.shadertoy.com/view/Xdf3RN
- progressive web app face detector https://youtu.be/m-sCdS0sQO8?t=1699

- https://openframeworks.cc/documentation/ofxEmscripten/ access camera with emscripten
- https://libcinder.org/about
- https://d2jta7o2zej4pf.cloudfront.net/
- https://github.com/shamadee/web-dsp
- https://www.html5rocks.com/en/tutorials/getusermedia/intro/
- https://developers.google.com/web/fundamentals/media/recording-video/
- https://developers.google.com/web/fundamentals/media/manipulating/live-effects
- https://webglfundamentals.org/
- http://blog.aviary.com/archive/live-image-processing-with-getusermedia-and-web-workers
- https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Basic_2D_animation_example boilerplate to draw into canvas
- webgl gpu https://www.youtube.com/watch?v=qkDg-Y9iHBA
- https://github.com/turbo/js
- https://developer.mozilla.org/en-US/docs/Tools/Remote_Debugging/Debugging_Firefox_for_Android_over_Wifi
- (network does not work with chrome!) on device enable debugging over network, on desktop: adb connect 192.168.1.11
- https://developers.google.com/web/tools/chrome-devtools/remote-debugging/
- * daemon not running; starting now at tcp:5037
- when connecting using a usb cable make sure adb debugging is enabled and the usb connnection is in data transfer mode (not just charging)
- i forwarded the port localhost:8080 from my desktop to 8008 on the android phone. then the camera works
- mobile firefox on android allows reading the camera (even through http)
- https://webglfundamentals.org/webgl/lessons/webgl-fundamentals.html (* more recent)
- https://www.html5rocks.com/en/tutorials/webgl/webgl_fundamentals/ 
- https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL wait until video data arrived
- https://developers.google.com/web/updates/2016/10/capture-stream capture canvas 
- https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API
- https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder encode as webm
- https://developer.mozilla.org/en-US/docs/Web/API/File (draft, might not allow store?)
- https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications
- https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element here they show how to download the stream
- view-source:https://mdn.mozillademos.org/en-US/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element$samples/Example?revision=1395579
- https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Taking_still_photos
- https://github.com/samdutton/simpl/blob/gh-pages/rtcpeerconnection/js/main.js
- https://www.html5rocks.com/en/tutorials/webrtc/basics/
- https://webcamtoy.com/app/ these shaders seem to remember the images
- https://gist.github.com/zziuni/3741933 a list of STUN servers
- about:webrtc information about sessions in firefox
- https://www.html5rocks.com/en/tutorials/webrtc/infrastructure/ signal path EventSource (Server sent event) and XHR; WebSockets
-  https://dzone.com/refcardz/html5-websocket?chapter=3
- https://quickref.common-lisp.net/hunchensocket.html
- chrome://netinternals/#sockets  fine grained reporting in chrome
- https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation check if we have wifi
- http://newartisans.com/2007/11/a-quick-hunchentoot-primer/
- http://www.justgoscha.com/programming/2014/03/07/simple-webrtc-datachannel-establishment-for-dummies.html
- https://www.w3.org/TR/hr-time-2/ sub-millisecond timing
- https://w3c.github.io/webrtc-pc/ webrtc spec


# Types
- typescript or eslint with tern.js?


# Get ssl keys
 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/{hostname}/fullchain.pem. Your cert will
   expire on 201x-xx-xx. To obtain a new or tweaked version of this
   certificate in the future, simply run certbot again. To
   non-interactively renew *all* of your certificates, run "certbot
   renew"
- here is an example of how to self-sign:
- https://stackoverflow.com/questions/50749373/hunchentoot-define-easy-handler-with-ssl


# Install nginx
wget http://nginx.org/download/nginx-1.15.7.tar.gz
./configure --with-http_ssl_module --without-http_charset_module --without-http_gzip_module --without-http_ssi_module --without-http_userid_module --without-http_access_module --without-http_auth_basic_module --without-http_mirror_module --without-http_autoindex_module --without-http_geo_module --without-http_map_module --without-http_split_clients_module --without-http_referer_module --without-http_rewrite_module --without-http_proxy_module --without-http_fastcgi_module --without-http_uwsgi_module  --without-http_scgi_module  --without-http_grpc_module   --without-http_memcached_module  --without-http_browser_module  --without-http_upstream_hash_module  --without-http_upstream_ip_hash_module  --without-http_upstream_least_conn_module  --without-http_upstream_keepalive_module  --without-http_upstream_zone_module  --without-pcre --with-cpu-opt=native


# Debug WebGL in browser
- https://spector.babylonjs.com/ spector.js shows gl calls and gl state


# WebRTC
- https://www.youtube.com/watch?v=Y1mx7cx6ckI Servers for WebRTC: It is not all Peer to Peer (Kranky Geek WebRTC
Brazil 2016)
- host, STUN (serve reflexive), TURN (relay), TURNS (relay over TLS TCP)
- ICE process figures out how to connect the peers
- CPaaS provider (communication platform as a service)


# Authentification
- https://github.com/slyrus/hunchentoot-auth
- https://github.com/fukamachi/lack Lack.Middleware.Auth.Basic
