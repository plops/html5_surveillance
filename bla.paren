;; trident-mode skewer-mode
;; in .emacs:
;; (add-to-list 'auto-mode-alist (cons "\\.paren\\'" 'lisp-mode))
;; (add-hook 'lisp-mode-hook
;;           #'(lambda ()
;;               (when (and buffer-file-name
;;                          (string-match-p "\\.paren\\>" buffer-file-name))
;;                 (unless (slime-connected-p)
;;                   (save-excursion (slime)))
;;                 (trident-mode +1))))

;; (global-set-key (kbd "<f3>") 'trident-eval-defun)

;; run-skewer
;; evaluate with F3
(+ 1 2)


(defun has-get-user-media ()
  (and navigator.media-devices
       navigator.media-devices.get-user-media))

(has-get-user-media)

(alert "hhuh")

(defun greeting-callback ()
  (if (has-get-user-media)
      (alert "cam")
      (alert "nocam")))

(greeting-callback)

(defun got-devices (device-infos)
  (loop for info in device-info do
       (let ((option (document.create-element "option")))
	 (setf option.value info.deviceId)
	 (case info.kind
	   ("videoinput"
	    (setf option.text (or info.label
				  (+ "camera"
				     (+ 1 video-selesct))))
	    (video-select.append-child option))
	   (t (console.log "found another kind of device"))))))

(defun get-stream ()
  (when window.stream
    (@ (window.stream.get-tracks)
       (for-each (lambda (track) (track.stop)))))
  (let ((constraints
	 (create video
		 (create device-id
			 (create exact
				 video-select.value)))))
    (@ (@
	((@ navigator media-devices get-user-media) constraints)
	(then got-stream))
       (catch handle-error))))
(defun got-stream (stream)
  (setf window.stream stream
	video-element.src-object stream))
(defun handle-error (error)
  (console.error "error: " error))
(let ((video (document.query-selector "video"))
      (video-select (document.query-selector "select#videoSource"))
      (constraints (create video t)))
  (@ (navigator.media-devices.get-user-media constraints)
     (then (lambda (stream)
	     (setf video.src-object stream))))
  (@ (navigator.media-devices.enumerate-devices)
     (then got-devices)
     (then get-stream)
     (catch handle-error))
  (setf video-select.onchange get-stream))
